#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('confusionserver:server');
var http = require('http');
const https = require("https");
const fs = require("fs");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//secure port for HTTPS. In a standard server acting as a web server,
//the HTTP protocol runs at port number 80, and the HTTPS protocol runs
//at port 443. However since this is a development application, we'll instead
//declare the secure port to run at our normal HTTP port +443 (so 3443),
//to follow the same conventions
app.set("secPort", port+443)

/**
 * Create HTTP server. We will keep the HTTP server to forward requests there to
 * the HTTPS server, as we will only service requests there.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//set the options for our HTTPS server to use our (self-signed) OpenSSL key and certificate
const httpsOptions = {
  key: fs.readFileSync(`${__dirname}/private.key`),
  cert: fs.readFileSync(`${__dirname}/certificate.pem`)
};

const secureServer = https.createServer(httpsOptions, app);

secureServer.listen(app.get("secPort"), () =>
{
  console.log(`Secure Server listening on port ${app.get("secPort")}`);
});

//handlers defined below
secureServer.on("error", onError);
secureServer.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
